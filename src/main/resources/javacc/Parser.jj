options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Parser)
    import ast.*;import solver.Checker;import solver.Transformer;
import java.util.*;
public class Parser {
    private static Long counter = -1L;
    // TODO: Variables in different rules will map to the same number. Probably fine?
    private static Map<String, Long> varToId = new HashMap<>();
    private static Map<Long, String> idToVar = new HashMap<>();
}
PARSER_END(Parser)

<DEFAULT> TOKEN : {
    < #DIGIT : ["0"-"9"] >
  | < #LETTER : ["A"-"Z","a"-"z"] >
  | < LPAREN : "(" >
  | < RPAREN : ")" >
  | < COMMA : "," >
  | < DOT : "." >
  | < QUESTION : "?" >
  | < IMPLIED_BY : ":-" >
  | < VAR_IDENTIFIER : ["A"-"Z"] (<LETTER> | <DIGIT> | "_")* >
  | < PRED_IDENTIFIER : ["a"-"z"] (<LETTER> | <DIGIT> | "_")* >
  | < INTEGER_LITERAL : (<DIGIT>)+ >
}

//
SKIP : {
    < "//"  (~["\r", "\n"])* >
  | < (" " | "\n" | "\r" | "\r\n" | "\t" | "\f" ) >
  | "/*" : ML_CMNT_ST
}


<ML_CMNT_ST> SKIP : {
    "*/" : DEFAULT
}

<ML_CMNT_ST > MORE : {
    < ~[] >
}

Program parse(): {
    Map<Long, List<Atom>> facts = new HashMap<>();
    Map<Long, List<Rule>> rules = new HashMap<>();
    Atom q = null;
} {
    Constraints(facts, rules) (<QUESTION> q=Atom() <QUESTION>)? <EOF> {
Checker.checkProgram(facts, rules, q);
counter = Transformer.changeFactsAndRulesToEDGFormat(facts, rules, counter);
HashMap<Long, Set<List<Long>>> newFacts = new HashMap<>();
for(var id: facts.keySet()) {
    Set<List<Long>> factSet = newFacts.put(id, new HashSet<>());
    for(var f: facts.get(id)) {
        List<Long> fact = new ArrayList<>();
        for(var l: f.ids) {
            fact.add(l.value);
        }
        factSet.add(fact);
    }
}
return new Program(newFacts, rules, q, idToVar, counter + 1);
}
}

void Constraints(Map<Long, List<Atom>> facts, Map<Long, List<Rule>> rules) : {
    Atom h;
    List<Atom> b = null;
} {
    h = Atom() (b=Body())? {if(b == null) {
        facts.putIfAbsent(h.pred, new ArrayList<>());
        facts.get(h.pred).add(h);
        for(int i = 0; i < h.ids.size(); i++) {
        if(h.ids.get(i).isVar) {
            throw new ParseException("Variable used in fact");
        }
    }} else {
    var rule = new Rule(h, b);
    rules.putIfAbsent(rule.head.pred, new ArrayList<>());
    rules.get(rule.head.pred).add(rule);
}} <DOT> (Constraints(facts, rules))?
}

List<Atom> Body(): {
    List<Atom> bodyList = new ArrayList<>();
    Atom p;
} {
    // Possibly empty body which can have a trailing comma. TODO.
    <IMPLIED_BY> p=Atom() {bodyList.add(p);}  (<COMMA> p=Atom() { bodyList.add(p); })*  { return bodyList; }
}

Atom Atom() : {
    Long id;
    List<Term> argList = new ArrayList<>();
} {
    id=PredIdentifier() <LPAREN> argList=ArgList(argList) <RPAREN> { return new Atom(id, argList); }
}

List<Term> ArgList(List<Term> argList) : {
    Term arg;
} {
    arg=Term() { argList.add(arg); } ( <COMMA> arg=Term() { argList.add(arg); } )*
    { return argList; }
}

Term IntValue() : {
    Token t;
} {
    t=<INTEGER_LITERAL> { return new Term(Long.valueOf(t.image), false); }
}

Term Term() : {
    Term t;
} {
    t = IntValue() { return t; }
|   t = VarIdentifier() { return t; }
}

Long PredIdentifier() : {
    Token t;
} {
    t=<PRED_IDENTIFIER> {
            Long value;
            if (varToId.containsKey(t.image)) {
                value = varToId.get(t.image);
            } else {
                value = counter--;
                varToId.put(t.image, value);
                idToVar.put(value, t.image);
            }
            return value;
        }
}

Term VarIdentifier() : {
    Token t;
} {
    t=<VAR_IDENTIFIER> {
            Long value;
            if (varToId.containsKey(t.image)) {
                value = varToId.get(t.image);
            } else {
                value = counter--;
                varToId.put(t.image, value);
                idToVar.put(value, t.image);
            }
            return new Term(value, true);
        }
}